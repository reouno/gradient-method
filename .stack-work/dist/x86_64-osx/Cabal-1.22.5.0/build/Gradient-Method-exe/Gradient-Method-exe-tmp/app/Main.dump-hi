
==================== FINAL INTERFACE ====================
2016-06-11 11:25:50.272368 UTC

interface main@main:Main 7103
  interface hash: 1a232f25b8d98647cf36128f31af78fb
  ABI hash: 64173d41583704516627acd481dcee96
  export-list hash: fe43d27c1d12f408ac82e9ffacd38439
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: faa5ca58b5b2f79011c4c266ae811f5f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.differential
  Main.epsilon
  Main.find_min
  Main.h
  Main.main
module dependencies:
package dependencies: Gradient-Method-0.1.0.0@Gradi_AasgltDGnmiDJo17XAkAMY
                      base-4.8.2.0* ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  Gradient-Method-0.1.0.0@Gradi_AasgltDGnmiDJo17XAkAMY:Lib c690bde95fde784208ab2cb85e4f8055
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
79663e319e7db4eb3b00eb3a98f30b4a
  $wfind_min ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 3, HasNoCafRefs, Strictness: <C(S),C(U(U))><L,U><L,U>,
     Inline: [0] -}
83d22b6bfd7a7f6b5ee0393698d72e24
  differential ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U(U))><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Double -> GHC.Types.Double
                   w1 :: GHC.Types.Double ->
                 case w (case w1 of wild { GHC.Types.D# x ->
                         GHC.Types.D# (GHC.Prim.+## x 1.0e-5) }) of wild { GHC.Types.D# x ->
                 case w w1 of wild1 { GHC.Types.D# y ->
                 GHC.Types.D# (GHC.Prim./## (GHC.Prim.-## x y) 1.0e-5) } }) -}
b81c93bd49ae41fdd239187383e62e35
  epsilon :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0e-5) -}
07b1be7ace6fa0d835efb5f546f857c1
  find_min ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),C(U(U))><S,U(U)><S,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Double -> GHC.Types.Double
                   w1 :: GHC.Types.Double
                   w2 :: GHC.Types.Double ->
                 case w1 of ww { GHC.Types.D# ww1 ->
                 case w2 of ww2 { GHC.Types.D# ww3 ->
                 case Main.$wfind_min w ww1 ww3 of ww4 { DEFAULT ->
                 GHC.Types.D# ww4 } } }) -}
eb85f35cdcedb82964d2bb37918230d4
  h :: GHC.Types.Double
  {- Strictness: m, Unfolding: (Main.epsilon) -}
c946caa3f0ecc45293c1d031cb5d0b03
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d129924577553a35390972ac2fcab378
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main26
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main25
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main24
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main23
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main20
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main18
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main15
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main14
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.True
                        ipv16 of ds10 { (#,#) ipv18 ipv19 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv18 } } } } } } } } } }) -}
00a58789c595caf66701e641b84b2869
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.main13
                   Main.main11) -}
4c9963403d1c7c0b9d796052e69a1a44
  main11 :: GHC.Base.String
  {- Unfolding: (Main.main12 (GHC.Types.[] @ GHC.Types.Char)) -}
528268a00ec8ca234253bf96e10cfc4d
  main12 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   2.00001000001393) -}
77931ec405f5cc7eba1ea83fa2691f77
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "f(x)\\227\\129\\174\\227\\128\\129a = 1 \\227\\129\\171\\227\\129\\138\\227\\129\\145\\227\\130\\139\\229\\139\\190\\233\\133\\141\\227\\129\\175\\227\\128\\129f'(a) = "#) -}
67e9d2182224e3a6bab28d0aaa4a2f9d
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\n\
                   \\n\
                   \----------------\\229\\190\\174\\229\\136\\134\\227\\129\\174\\228\\190\\139\\239\\188\\136\\229\\139\\190\\233\\133\\141\\227\\130\\146\\230\\177\\130\\227\\130\\129\\227\\130\\139\\228\\190\\139\\239\\188\\137----------------\n"#) -}
e4d0e3e4d5f80adb0e8cbe6c18dda636
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "f(x):  f(min) = "#
                   Main.main16) -}
f41c0c79293de765b4097f47bbea43d9
  main16 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_minValue of wild { GHC.Types.D# x ->
                 GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   (GHC.Prim.*## x x)
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
7bae65f7928a05a08381e5725e817bbb
  main17 :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ x :: GHC.Types.Double ->
                 GHC.Float.timesDouble x x) -}
60f3f464d414d85ab0814e8474825099
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "Local minimum value:  min = "#
                   Main.main19) -}
9df466bcdcbdf6f9579c7af3fb32e479
  main19 :: [GHC.Types.Char]
  {- Unfolding: (case Main.main_minValue of ww { GHC.Types.D# ww1 ->
                 GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   ww1
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
177a191f860fa04694f3a2cc4daad523
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.main5
                   Main.main3) -}
d8e25118eb6e020380d01be3e590f903
  main20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "Initial value:  a = "#
                   Main.main21) -}
8b5809d6b312782380d3e918e72c23ff
  main21 :: GHC.Base.String
  {- Unfolding: (Main.main22 (GHC.Types.[] @ GHC.Types.Char)) -}
84fd8c559053543bdfa93326ab211da1
  main22 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   1.0) -}
81798ab07ddb0626fa5ffde4a70a4d88
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Function:  f(x) = x^2"#) -}
efe99acff99449a1803145eb87f91329
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This sample is for function of one variable."#) -}
db362675a64c7d121ba79920942b1d54
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This program is sample of \"Gradient method\"."#) -}
57b5fd173f209a9c8a893788e2f25fc1
  main26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "----------------Gradient method\\239\\188\\136\\229\\139\\190\\233\\133\\141\\230\\179\\149\\239\\188\\137----------------\n"#) -}
614c973059277cc7ae03fa0f892e68cc
  main27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ca7e1bef2723a91234ca4fec4a7cf64d
  main3 :: GHC.Base.String
  {- Unfolding: (Main.main4 (GHC.Types.[] @ GHC.Types.Char)) -}
e7a592df98613ed2d3dce178d040ee38
  main4 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   40.00001000008524) -}
430907015fe0b5f6ace3777939d1de24
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "f(x)\\227\\129\\174\\227\\128\\129a = 20 \\227\\129\\171\\227\\129\\138\\227\\129\\145\\227\\130\\139\\229\\139\\190\\233\\133\\141\\227\\129\\175\\227\\128\\129f'(a) = "#) -}
59f472d7a212d79e10c5f6b950aa7827
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.main9
                   Main.main7) -}
50d6f7984e1ecef3eb54ef28caeb856f
  main7 :: GHC.Base.String
  {- Unfolding: (Main.main8 (GHC.Types.[] @ GHC.Types.Char)) -}
3dbdfd15398139a8ff53f0f2cbf59e2a
  main8 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble_$sshowFloat
                   GHC.Show.shows18
                   -1.9999899999900703) -}
fde9f0d8a56297d943adcc0d086f0294
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "f(x)\\227\\129\\174\\227\\128\\129a = -1 \\227\\129\\171\\227\\129\\138\\227\\129\\145\\227\\130\\139\\229\\139\\190\\233\\133\\141\\227\\129\\175\\227\\128\\129f'(a) = "#) -}
304ea000a82cdbb6505880407cd0f798
  main_minValue :: GHC.Types.Double
  {- Unfolding: (case Main.$wfind_min
                        Main.main17
                        1.0
                        2.00001000001393 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

